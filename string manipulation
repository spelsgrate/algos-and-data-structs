def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    return s == s[::-1]

def compute_lps(pattern):
    lps = [0] * len(pattern)
    length = 0
    i = 1

    while i < len(pattern):
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1

    return lps

def kmp_search(text, pattern):
    m, n = len(pattern), len(text)
    lps = compute_lps(pattern)

    i = j = 0
    results = []

    while i < n:
        if pattern[j] == text[i]:
            i += 1
            j += 1

        if j == m:
            results.append(i - j)
            j = lps[j - 1]
        elif i < n and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

    return results

def longest_substring_without_repeats(s):
    char_index = {}
    start = max_length = 0
    max_substring = ''

    for i, char in enumerate(s):
        if char in char_index and start <= char_index[char]:
            start = char_index[char] + 1
        else:
            if i - start + 1 > max_length:
                max_length = i - start + 1
                max_substring = s[start:i+1]
        
        char_index[char] = i

    return max_substring

# Example usage
if __name__ == "__main__":
    text = "hello world"
    pattern = "ll"
    
    print(f"Reverse of '{text}': {reverse_string(text)}")
    print(f"Is '{text}' a palindrome? {is_palindrome(text)}")
    print(f"KMP search for '{pattern}' in '{text}': {kmp_search(text, pattern)}")
    print(f"Longest substring without repeats in '{text}': {longest_substring_without_repeats(text)}")
